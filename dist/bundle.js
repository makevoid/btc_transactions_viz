/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $range = Opal.range, $klass = Opal.klass, $gvars = Opal.gvars;
  if ($gvars.document == null) $gvars.document = nil;

  Opal.add_stubs(['$new', '$on', '$puts', '$inject', '$map', '$/', '$**', '$round', '$transactions=', '$+', '$[]', '$transactions', '$include', '$a', '$div', '$params', '$tx_url', '$after_mount', '$define_state', '$h3', '$p', '$present', '$each_with_index', '$render', '$create_element', '$to_n', '$body']);
  console.log("loading app environment");
  self.$require("browser");
  (function($base) {
    var self = $module($base, 'TxFetcher');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$load_transactions', function() {
      var $a, $b, TMP_1, self = this, tx_viz = nil;

      tx_viz = self;
      return ($a = ($b = (($scope.get('Browser')).$$scope.get('Socket'))).$new, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

      ($a = ($b = self).$on, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.$puts("{\"op\":\"unconfirmed_sub\"}")}, TMP_2.$$s = self, TMP_2), $a).call($b, "open");
        return ($a = ($c = self).$on, $a.$$p = (TMP_3 = function(e){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, data = nil, out = nil, hash = nil, value = nil, tx = nil;
if (e == null) e = nil;
        data = JSON.parse(e.native.data).x;
          out = data.out;
          hash = data.hash;
          value = ($a = ($b = out).$map, $a.$$p = (TMP_4 = function(o){var self = TMP_4.$$s || this;
if (o == null) o = nil;
          return (o.value)['$/']((10)['$**'](8))}, TMP_4.$$s = self, TMP_4), $a).call($b).$inject("+");
          value = value.$round(8);
          tx = $hash2(["value", "hash"], {"value": value, "hash": hash});
          return (($a = [[tx]['$+'](tx_viz.$transactions()['$[]']($range(0, 1000, false)))]), $c = tx_viz, $c['$transactions='].apply($c, $a), $a[$a.length-1]);}, TMP_3.$$s = self, TMP_3), $a).call($c, "message");}, TMP_1.$$s = self, TMP_1), $a).call($b, "wss://ws.blockchain.info/inv");
    })
  })(self);
  (function($base, $super) {
    function $Transaction(){};
    var self = $Transaction = $klass($base, $super, 'Transaction', $Transaction);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    def.$tx_url = function(tx_hash) {
      var self = this;

      return "https://blockchain.info/tx/" + (tx_hash);
    };

    return (def.$render = function() {
      var $a, $b, TMP_5, self = this;

      return ($a = ($b = self).$a, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6;

      return ($a = ($b = self).$div, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$params()['$[]']("tx")['$[]']("value")}, TMP_6.$$s = self, TMP_6), $a).call($b, $hash2(["style"], {"style": $hash2(["width"], {"width": "" + (self.$params()['$[]']("tx")['$[]']("value").$round()) + "%"})}))}, TMP_5.$$s = self, TMP_5), $a).call($b, $hash2(["href"], {"href": self.$tx_url(self.$params()['$[]']("tx")['$[]']("hash"))}));
    }, nil) && 'render';
  })(self, null);
  (function($base, $super) {
    function $TxViz(){};
    var self = $TxViz = $klass($base, $super, 'TxViz', $TxViz);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_7;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    self.$include($scope.get('TxFetcher'));

    self.$after_mount("load_transactions");

    ($a = ($b = self).$define_state, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

    return []}, TMP_7.$$s = self, TMP_7), $a).call($b, "transactions");

    return (def.$render = function() {
      var $a, $b, TMP_8, self = this;

      return ($a = ($b = self).$div, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b, TMP_9, $c, TMP_12;

      ($a = ($b = self).$div, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a, $b, TMP_10, $c, TMP_11;

        ($a = ($b = self).$h3, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return "Bitcoin Transactions"}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return ($a = ($c = self).$p, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return "realtime transactions visualizer, bitcoin network - opal, react, css3, websockets, bitcoin, blockchain, blockchain.com, bitcoind"}, TMP_11.$$s = self, TMP_11), $a).call($c, $hash2(["className"], {"className": "mini"}));}, TMP_9.$$s = self, TMP_9), $a).call($b, $hash2(["className"], {"className": "header"}));
        return ($a = ($c = self).$div, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a, $b, TMP_13;

        return ($a = ($b = self.$transactions().$each_with_index()).$map, $a.$$p = (TMP_13 = function(tx, idx){var self = TMP_13.$$s || this;
if (tx == null) tx = nil;if (idx == null) idx = nil;
          return self.$present($scope.get('Transaction'), $hash2(["tx", "key"], {"tx": tx, "key": tx['$[]']("hash")}))}, TMP_13.$$s = self, TMP_13), $a).call($b)}, TMP_12.$$s = self, TMP_12), $a).call($c, $hash2(["className"], {"className": "tx_list"}));}, TMP_8.$$s = self, TMP_8), $a).call($b);
    }, nil) && 'render';
  })(self, null);
  console.log("asd");
  return $scope.get('React').$render($scope.get('React').$create_element($scope.get('TxViz')), $gvars.document.$body().$to_n());
})(Opal);
