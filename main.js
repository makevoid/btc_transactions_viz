/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var $a, $b, TMP_11, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $module = Opal.module, $klass = Opal.klass, after = nil, unmount_component = nil;
  if ($gvars.window == null) $gvars.window = nil;
  if ($gvars.document == null) $gvars.document = nil;

  Opal.add_stubs(['$convert', '$class_eval', '$before_mount', '$before_unmount', '$each', '$<<', '$include', '$define_state', '$set_interval', '$seconds=', '$+', '$seconds', '$puts', '$span', '$render', '$create_element', '$to_n', '$body', '$lambda', '$unmount_component_at_node']);
  self.$require("browser");
  self.$require("browser/http");
  Opal.cdecl($scope, 'WINDOW', $scope.get('Native').$convert($gvars.window));
  (function($base) {
    var self = $module($base, 'SetInterval');

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    Opal.defs(self, '$included', function(base) {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

      ($a = ($b = self).$before_mount, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.interval = []}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return ($a = ($c = self).$before_unmount, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4;
          if (self.interval == null) self.interval = nil;

        return ($a = ($b = self.interval).$each, $a.$$p = (TMP_4 = function(i){var self = TMP_4.$$s || this;
if (i == null) i = nil;
          return $scope.get('WINDOW').clearInterval(i);}, TMP_4.$$s = self, TMP_4), $a).call($b)}, TMP_3.$$s = self, TMP_3), $a).call($c);}, TMP_1.$$s = self, TMP_1), $a).call($b);
    });

    Opal.defn(self, '$set_interval', TMP_5 = function(seconds) {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil, every = nil;
      if (self.interval == null) self.interval = nil;

      TMP_5.$$p = null;
      every = 1;
      return self.interval['$<<']($scope.get('WINDOW').setInterval(block, every * 1000));
    });
  })(self);
  (function($base, $super) {
    function $TickTock(){};
    var self = $TickTock = $klass($base, $super, 'TickTock', $TickTock);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_6, $c, TMP_7;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    self.$include($scope.get('SetInterval'));

    ($a = ($b = self).$define_state, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return 0}, TMP_6.$$s = self, TMP_6), $a).call($b, "seconds");

    ($a = ($c = self).$before_mount, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_9;

    ($a = ($b = self).$set_interval, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b;

      return (($a = [self.$seconds()['$+'](1)]), $b = self, $b['$seconds='].apply($b, $a), $a[$a.length-1])}, TMP_8.$$s = self, TMP_8), $a).call($b, 1);
      return ($a = ($c = self).$set_interval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

      return self.$puts("Tick!")}, TMP_9.$$s = self, TMP_9), $a).call($c, 1);}, TMP_7.$$s = self, TMP_7), $a).call($c);

    return (def.$render = function() {
      var $a, $b, TMP_10, self = this;

      return ($a = ($b = self).$span, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return "React has been running for: " + (self.$seconds())}, TMP_10.$$s = self, TMP_10), $a).call($b);
    }, nil) && 'render';
  })(self, null);
  $scope.get('React').$render($scope.get('React').$create_element($scope.get('TickTock')), $gvars.document.$body().$to_n());
  after = 5;
  unmount_component = ($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;
    if ($gvars.document == null) $gvars.document = nil;

  return $scope.get('React').$unmount_component_at_node($gvars.document.$body().$to_n())}, TMP_11.$$s = self, TMP_11), $a).call($b);
  return $scope.get('WINDOW').setTimeout(unmount_component.$to_n(), after * 1000);
})(Opal);
